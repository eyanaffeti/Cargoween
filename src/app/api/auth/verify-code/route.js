import { connectToDatabase } from "@/lib/mongodb";
import Transitaire from "@/models/Transitaire";
import Airline from "@/models/Airline";
import jwt from "jsonwebtoken";

export async function POST(req) {
  try {
    const { email, verificationCode } = await req.json();
    await connectToDatabase();

    console.log("üì© V√©rification pour l'email :", email);
    console.log("üëÄ Code re√ßu du front :", verificationCode);

    let user = await Transitaire.findOne({ email });

    if (!user) {
      user = await Airline.findOne({ email });
    }

    if (!user) {
      console.log("‚ùå Utilisateur non trouv√© !");
      return new Response(JSON.stringify({ message: "Utilisateur non trouv√©" }), { status: 404 });
    }

    console.log("üìÇ Code stock√© en base :", user.verificationCode);

    if (!user.verificationCode || !user.verificationCodeExpires) {
      console.log("‚ùå Aucun code stock√© ou code expir√© !");
      return new Response(JSON.stringify({ message: "Aucun code trouv√© pour cet email" }), { status: 400 });
    }

    if (parseInt(verificationCode) !== user.verificationCode) {
      console.log("‚ùå Code incorrect ! Attendu :", user.verificationCode, "Re√ßu :", verificationCode);
      return new Response(JSON.stringify({ message: "Code incorrect" }), { status: 400 });
    }

    if (new Date() > user.verificationCodeExpires) {
      console.log("‚ùå Code expir√© !");
      return new Response(JSON.stringify({ message: "Code expir√©" }), { status: 400 });
    }

    const updatedUser = await (user instanceof Transitaire ? Transitaire : Airline).findByIdAndUpdate(
      user._id,
      {
        isVerified: true,
        verificationCode: null,
        verificationCodeExpires: null,
      },
      { new: true }
    );

    console.log("‚úÖ Utilisateur apr√®s v√©rification :", updatedUser);

    // ‚úÖ Inclure explicitement le r√¥le dans la r√©ponse JSON
    const token = jwt.sign(
      { id: updatedUser._id, email: updatedUser.email, role: updatedUser.role, isVerified: true },
      process.env.JWT_SECRET,
      { expiresIn: "1h" }
    );

    console.log("‚úÖ Token g√©n√©r√© avec `isVerified` et `role` :", token);

    return new Response(
      JSON.stringify({ 
        message: "Code v√©rifi√© avec succ√®s", 
        token, 
        role: updatedUser.role, // ‚úÖ Retour explicite du r√¥le
        isVerified: true 
      }),
      { status: 200 }
    );
    
  } catch (error) {
    console.error("‚ùå Erreur serveur :", error);
    return new Response(
      JSON.stringify({ message: "Erreur serveur", error: error.message }),
      { status: 500 }
    );
  }
}
