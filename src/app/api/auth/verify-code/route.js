import { connectToDatabase } from "@/lib/mongodb";
import Transitaire from "@/models/Transitaire";
import Airline from "@/models/Airline";
import jwt from "jsonwebtoken";

export async function POST(req) {
  try {
    const { email, verificationCode } = await req.json();
    await connectToDatabase();

    console.log("üì© V√©rification pour l'email :", email);
    console.log("üëÄ Code re√ßu du front :", verificationCode);

    // ‚úÖ Chercher l'utilisateur dans `Transitaire` d'abord
    let user = await Transitaire.findOne({ email });

    // ‚úÖ Si l'utilisateur n'est pas un `Transitaire`, on cherche dans `Airlines`
    if (!user) {
      user = await Airline.findOne({ email });
    }

    // ‚úÖ Si toujours pas trouv√©, retourner une erreur
    if (!user) {
      console.log("‚ùå Utilisateur non trouv√© !");
      return new Response(JSON.stringify({ message: "Utilisateur non trouv√©" }), { status: 404 });
    }

    console.log("üìÇ Code stock√© en base :", user.verificationCode);

    // ‚úÖ V√©rifier que le code est bien stock√©
    if (!user.verificationCode || !user.verificationCodeExpires) {
      console.log("‚ùå Aucun code stock√© ou code expir√© !");
      return new Response(JSON.stringify({ message: "Aucun code trouv√© pour cet email" }), { status: 400 });
    }

    // ‚úÖ V√©rifier si le code correspond et s'il n'a pas expir√©
    if (parseInt(verificationCode) !== user.verificationCode) {
      console.log("‚ùå Code incorrect ! Attendu :", user.verificationCode, "Re√ßu :", verificationCode);
      return new Response(JSON.stringify({ message: "Code incorrect" }), { status: 400 });
    }

    if (new Date() > user.verificationCodeExpires) {
      console.log("‚ùå Code expir√© !");
      return new Response(JSON.stringify({ message: "Code expir√©" }), { status: 400 });
    }

    // ‚úÖ Mettre l'utilisateur comme v√©rifi√©
    const updatedUser = await (user instanceof Transitaire ? Transitaire : Airline).findByIdAndUpdate(user._id, {
        isVerified: true,
        verificationCode: null,
        verificationCodeExpires: null,
      }, { new: true });

    console.log("‚úÖ Utilisateur apr√®s v√©rification :", updatedUser);

    // ‚úÖ G√©n√©rer un Token JWT apr√®s la v√©rification du code
    const token = jwt.sign(
      { id: user._id, email: user.email, role: user.role, isVerified: true },
      process.env.JWT_SECRET,
      { expiresIn: "1h" }
    );
    console.log("‚úÖ Token g√©n√©r√© avec `isVerified` :", token);

    return new Response(
      JSON.stringify({ message: "Code v√©rifi√© avec succ√®s", token }),
      { status: 200 }
    );

  } catch (error) {
    console.error("‚ùå Erreur serveur :", error);
    return new Response(
      JSON.stringify({ message: "Erreur serveur", error: error.message }),
      { status: 500 }
    );
  }
}
